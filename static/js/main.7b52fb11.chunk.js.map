{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sizes","App","className","target","href","rel","keys","map","ico","key","name","size","theme","tooltip","disabled","sort","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAOMA,G,YAAQ,CACV,OACA,QACA,SACA,QACA,MACA,SAsDWC,MAvCf,WAIE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YAEX,gDAEA,iHAAuF,IACnF,uBAAGC,OAAO,SAASC,KAAK,kCAAkCC,IAAI,uBAA9D,yBADJ,MAGA,sCAAY,IACR,uBAAGD,KAAK,iDAAR,kDAEJ,2CACA,yBAAKF,UAAU,gBACVI,OAAKC,KAAI,SAAAC,GAAG,OAAI,kBAAC,IAAD,CAAMC,IAAKD,EAAKE,KAAMF,EAAKG,KAAK,SAASC,MAAM,QAAQC,QAASL,QAGrF,0CACA,yBAAKN,UAAU,qBACVI,OAAKC,KAAI,SAAAC,GAAG,OAAI,kBAAC,IAAD,CAAMC,IAAKD,EAAKE,KAAMF,EAAKG,KAAK,SAASC,MAAM,OAAOC,QAASL,QAEpF,8CACA,yBAAKN,UAAU,SACVF,EAAMO,KAAI,SAACI,GAAD,OAAU,yBAAKF,IAAKE,GAAM,kBAAC,IAAD,CAAMD,KAAK,OAAOC,KAAMA,EAAMC,MAAM,QAAQC,QAASF,QAC1F,6BAAK,kBAAC,IAAD,CAAMG,UAAU,EAAMJ,KAAK,OAAOC,KAAK,OAAOC,MAAM,QAAQC,QAAQ,sBAG7E,oCAAUP,OAAKS,OAAOC,KAAK,OAEzB,6CAAoB,uBAAGZ,KAAK,gCAAR,oBAApB,qBCjDQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7b52fb11.chunk.js","sourcesContent":["import React from 'react';\n\nimport  Icon, { keys }  from 'react-crud-icons'\n\nimport '../node_modules/react-crud-icons/dist/css/react-crud-icons.css'\nimport './App.css';\n\nconst sizes = [\n    \"tiny\",\n    \"small\",\n    \"medium\",\n    \"large\",\n    \"big\",\n    \"huge\",\n]\n/*\nconst sizes = [\n    \"mini\",\n    \"tiny\",\n    \"small\",\n    \"medium\",\n    \"large\",\n    \"big \",\n    \"huge\",\n    \"massive\",\n]\n*/\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\"> \n      <div className=\"evo-home\">\n            \n          <h2>React-CRUD-Icons</h2>\n\n          <p>Set of 48 SVG icons for CRUD applications (hand-picked among thousands of icons at {' '}\n              <a target=\"_blank\" href=\"https://materialdesignicons.com\" rel=\"noopener noreferrer\">Material Design Icons</a>).</p>\n\n          <p>GitHub: {' '}\n              <a href=\"https://github.com/evoluteur/react-crud-icons\">https://github.com/evoluteur/react-crud-icons</a></p>\n          \n          <h3>Light theme</h3>\n          <div className=\"icons-notext\">\n              {keys.map(ico => <Icon key={ico} name={ico} size=\"medium\" theme=\"light\" tooltip={ico} />)}\n          </div>\n\n          <h3>Dark theme</h3>\n          <div className=\"icons-notext dark\">\n              {keys.map(ico => <Icon key={ico} name={ico} size=\"medium\" theme=\"dark\" tooltip={ico} />)}\n          </div> \n          <h3>Sizes on white</h3>\n          <div className=\"sizes\">\n              {sizes.map((size) => <div key={size}><Icon name=\"apps\" size={size} theme=\"light\" tooltip={size} /></div> )}  \n              <div><Icon disabled={true} name=\"apps\" size=\"huge\" theme=\"light\" tooltip=\"huge & disabled\" /></div>\n          </div>\n\n          <p>Keys: {keys.sort().join(', ')}</p>\n                \n            <footer>&#169; 2020 <a href=\"https://evoluteur.github.io/\">Olivier Giulieri</a> - MIT license</footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}